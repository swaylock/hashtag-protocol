import config from "config";

// Environment variable parsing. Do not edit this file directly.
// See .env.example
const appConfig = {
  hashtagSubgraph: parse(
    "VUE_APP_HASHTAG_SUBGRAPH_URL",
    "https://api.thegraph.com/subgraphs/name/hashtag-protocol/hashtag-rinkeby"
  ),
  nftSearchSubgraph: parse(
    "VUE_APP_TOP_NFTS_SUBGRAPH_URL",
    "https://api.thegraph.com/subgraphs/name/blockrockettech/nft-tokens"
  ),
  blocknativeApiKey: parse("VUE_APP_BLOCKNATIVE_API_KEY", "string"),
  onboardNetworkID: parse("VUE_APP_ONBOARD_NETWORK_ID", 4),
  onboardNetworkName: parse("VUE_APP_ONBOARD_NETWORK_NAME", "Rinkeby"),
  publisherWalletAddress: parse(
    "VUE_APP_PUBLISHER_ADDRESS",
    "0xD677AEd0965AC9B54e709F01A99cEcA205aebC4B"
  ),
  localstorageWalletKey: parse(
    "VUE_APP_ONBOARD_LOCALSTORAGE_WALLET_KEY",
    "HashtagSelectedWallet"
  ),
  discordServer: parse("VUE_APP_DISCORD_SERVER", "http://localhost:8080/"),

  install(Vue) {
    Vue.prototype.$appConfig = this;
  },
};

function parse(configkey, fallback) {
  let setting = null;

  // This is a production build; assuming on platform.sh use the
  // runtime config settings output into /public/config.js.
  // @see /src/.platform.app.yaml
  if (process.env.NODE_ENV === "production" && config[configkey]) {
    setting = config[configkey];
  }

  // Assuming this is local development mode (probably local dev)
  // use the .env.local settings. @see .env.example
  if (process.env.NODE_ENV === "development" && process.env[configkey]) {
    setting = process.env[configkey];
  }

  //setting = fallback;
  if (setting == null) {
    return fallback;
  }

  switch (typeof fallback) {
    case "boolean":
      return !!JSON.parse(setting);
    case "number":
      return JSON.parse(setting);
    default:
      return setting;
  }
}

export default appConfig;
